# azure-pipelines.yml
#
# Azure Pipelines configuration file
# project: https://dev.azure.com/jtmmoon/goto_http_redirect_server/_build
# source: https://github.com/jtmoon79/goto_http_redirect_server/blob/master/.azure-pipelines/
#
# YAML Schema
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema
# (http://archive.fo/TFpib)
# Task Catalog
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/index?view=azure-devops
# (http://archive.ph/2q9aS)
# vmImage list
# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
# (http://archive.ph/Ed9H0)
---
trigger:  # these are branches
  - master
  - azure-pipelines
variables:
  GOTO_PATH_PROGRAM_PY: $(Build.SourcesDirectory)/goto_http_redirect_server/goto_http_redirect_server.py
  GOTO_PROGRAM: goto_http_redirect_server
  GOTO_PACKAGE_NAME: goto_http_redirect_server
  GOTO_PATH_TEST: $(Build.SourcesDirectory)/goto_http_redirect_server/test
  GOTO_PATH_DIST: $(Build.SourcesDirectory)/dist
  GOTO_PATH_MYPY_INIT: $(Build.SourcesDirectory)/.config/mypy.ini
  GOTO_PATH_YAMLLINT: $(Build.SourcesDirectory)/tools/ci/yamllint.sh
  GOTO_PATH_READLINK: $(Build.SourcesDirectory)/tools/ci/readlink.sh
  GOTO_PATH_ADD_PIP_SITE: $(Build.SourcesDirectory)/tools/ci/PATH-add-pip-site.sh
  GOTO_PYTEST_REPORT: pytest-report.xml
  GOTO_VM_IMAGE: 'ubuntu-18.04'  # default working VM
  GOTO_PY_VERSION: '3.7'  # default working Python
  GOTO_WHEEL_ARTIFACT_DEFAULT: artifact_wheel_$(GOTO_VM_IMAGE)  # default wheel package - one of the built wheel artifacts must have this name
stages:
  - stage: stage_env_dump
    displayName: 'stage: «env dump»'
    jobs:
      - job: job_env_dump
        displayName: 'job: «env dump»'
        pool:
          vmImage: $(GOTO_VM_IMAGE)
        steps:
          - task: Bash@3
            displayName: 'task: «Bash@3» vmImage "$(GOTO_VM_IMAGE)"'
            inputs:
              targetType: inline
              script: |
                set -eux
                pwd
                whoami
                hostname
                cat /etc/os-release || true
                env | sort
                ls -la .
                uname -a
                docker info || true
                python --version
                python -m pip --version
                python -m pip list --disable-pip-version-check --no-index -vvv
                chmod -v +x "${GOTO_PATH_READLINK}"  # test
  - stage: stage_yamllint_mypy_pytest
    displayName: 'stage: «yamllint mypy pytest»'
    jobs:
      - job: job_yamllint
        displayName: 'job: «yamllint»'
        pool:
          vmImage: $(GOTO_VM_IMAGE)
        steps:
          - task: UsePythonVersion@0
            displayName: 'task: «UsePythonVersion@0» Python $(GOTO_PY_VERSION)'
            inputs:
              versionSpec: $(GOTO_PY_VERSION)
          - task: Bash@3
            displayName: 'task: «Bash@3»'
            inputs:
              targetType: inline
              script: |
                set -eux
                source "${GOTO_PATH_ADD_PIP_SITE}"
                # TOOD: install yamllint using setup.py
                python -m pip install --quiet --user yamllint
                python -m pip list --disable-pip-version-check --no-index -vvv
                chmod -v +x "${GOTO_PATH_YAMLLINT}"
                "${GOTO_PATH_YAMLLINT}"
      - job: job_mypy
        displayName: 'job: «mypy»'
        pool:
          vmImage: $(GOTO_VM_IMAGE)
        steps:
          - task: UsePythonVersion@0
            displayName: 'task: «UsePythonVersion@0» Python $(GOTO_PY_VERSION)'
            inputs:
              versionSpec: $(GOTO_PY_VERSION)
          - task: Bash@3
            displayName: 'task: «Bash@3»'
            inputs:
              targetType: inline
              script: |
                set -eux
                python -m pip install --quiet --user mypy
                python -m pip list --disable-pip-version-check --no-index -vvv
                python -m mypy --config-file "${GOTO_PATH_MYPY_INIT}" "${GOTO_PATH_PROGRAM_PY}"
      - job: job_pytest
        displayName: 'job: «pytest»'
        pool:
          vmImage: $(GOTO_VM_IMAGE)
        steps:
          - task: UsePythonVersion@0
            displayName: 'task: «UsePythonVersion@0» Python $(GOTO_PY_VERSION)'
            inputs:
              versionSpec: $(GOTO_PY_VERSION)
          - task: Bash@3
            displayName: 'task: «Bash@3»'
            inputs:
              targetType: inline
              script: |
                set -eux
                python -m pip install --quiet --user pytest
                python -m pip list --disable-pip-version-check --no-index -vvv
                python -m pytest --verbose --junit-xml="${GOTO_PYTEST_REPORT}" "${GOTO_PATH_TEST}"
                cat "${GOTO_PYTEST_REPORT}" | python -c "import sys;import xml.dom.minidom;s=sys.stdin.read();print(xml.dom.minidom.parseString(s).toprettyxml())"
                cp -av -- "${GOTO_PYTEST_REPORT}" "${BUILD_ARTIFACTSTAGINGDIRECTORY}/"
          - task: PublishBuildArtifacts@1
            displayName: 'task: «PublishBuildArtifacts@1» $(GOTO_PYTEST_REPORT) "$(Build.ArtifactStagingDirectory)"'
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: artifact_pytest_report
  - stage: stage_build
    displayName: 'stage: «build»'
    jobs:
      - job: job_build
        displayName: 'job: «build»'
        strategy:
          matrix:
            Ubuntu1804:
              vmImageName: 'ubuntu-18.04'
            Win2016:
              vmImageName: 'vs2017-win2016'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: UsePythonVersion@0
            displayName: 'task: «UsePythonVersion@0» Python $(GOTO_PY_VERSION)'
            inputs:
              versionSpec: $(GOTO_PY_VERSION)
          - task: Bash@3
            displayName: 'task: «Bash@3» vmImage "$(vmImageName)"'
            condition: not(in(variables['vmImageName'], 'vs2017-win2016'))
            inputs:
              targetType: inline
              script: |
                # script settings
                set -eux
                # install build packages
                # TODO: install wheel using setup.py
                python -m pip install --quiet --user wheel twine
                python -m pip list --disable-pip-version-check --no-index -vvv
                # do the build
                python setup.py -v bdist_wheel
                # check with twine
                ls -l "${GOTO_PATH_DIST}"
                python -m twine check "${GOTO_PATH_DIST}"/*.whl
          - task: PowerShell@2
            displayName: 'task: «PowerShell@2» vmImage "$(vmImageName)"'
            condition: in(variables['vmImageName'], 'vs2017-win2016')
            # condition: in(variables.vmImageName, 'vs2017-win2016')
            inputs:
              targetType: inline
              script: |
                # script settings
                $PSVersionTable
                $DebugPreference = "Continue"
                $ErrorActionPreference = "Stop"
                Set-PSDebug -Trace 1
                # install build packages
                & python -m pip install --quiet --user wheel twine
                & python -m pip list --disable-pip-version-check --no-index -vvv
                # do the build
                & python setup.py -v bdist_wheel
                # check with twine
                & python -m twine check $env:GOTO_PATH_DIST\*.whl
          - task: CopyFiles@2
            displayName: 'task: «CopyFiles@2» wheel Package to Build Artifact Staging Directory "$(Build.ArtifactStagingDirectory)"'
            inputs:
              sourceFolder: '$(GOTO_PATH_DIST)'
              contents: '*.whl'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
              preserveTimestamp: true
          - task: PublishBuildArtifacts@1
            displayName: 'task: «PublishBuildArtifacts@1» artifact_wheel_$(vmImageName)'
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'artifact_wheel_$(vmImageName)'
  - stage: stage_install_user_self_test
    displayName: 'stage: «install --user, run self-test»'
    jobs:
      - job: job_run_test
        displayName: 'job: «install --user, run self-test»'
        strategy:
          matrix:
            Ubuntu1604_Python35:
              python.version: '3.5'
              vmImageName: 'ubuntu-16.04'
            Ubuntu1604_Python36:
              python.version: '3.6'
              vmImageName: 'ubuntu-16.04'
            Ubuntu1604_Python37:
              python.version: '3.7'
              vmImageName: 'ubuntu-16.04'
            Ubuntu1604_Python38:
              python.version: '3.8'
              vmImageName: 'ubuntu-16.04'
            Ubuntu1804_Python35:
              python.version: '3.5'
              vmImageName: 'ubuntu-18.04'
            Ubuntu1804_Python36:
              python.version: '3.6'
              vmImageName: 'ubuntu-18.04'
            Ubuntu1804_Python37:
              python.version: '3.7'
              vmImageName: 'ubuntu-18.04'
            Ubuntu1804_Python38:
              python.version: '3.8'
              vmImageName: 'ubuntu-18.04'
            MacOS1014:
              python.version: $(GOTO_PY_VERSION)
              vmImageName: 'macOS-10.14'
            Win2016:
              python.version: $(GOTO_PY_VERSION)
              vmImageName: 'vs2017-win2016'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: UsePythonVersion@0
            displayName: 'task: «UsePythonVersion@0» Python $(python.version)'
            inputs:
              versionSpec: '$(python.version)'
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: $(GOTO_WHEEL_ARTIFACT_DEFAULT)
              path: $(Build.BinariesDirectory)
          - task: Bash@3
            displayName: 'task: «Bash@3» vmImage "$(vmImageName)" Python $(python.version)'
            condition: not(in(variables['vmImageName'], 'vs2017-win2016'))
            inputs:
              targetType: inline
              script: |
                # script settings
                set -eux

                chmod -v +x "${GOTO_PATH_READLINK}"

                # update packages
                python -m pip install --quiet --upgrade pip setuptools
                python -m pip list --disable-pip-version-check --no-index -vvv

                # update PATH with potential pip install locations
                source "${GOTO_PATH_ADD_PIP_SITE}"

                # install wheel package
                cv_whl=$("${GOTO_PATH_READLINK}" "$(find "${BUILD_BINARIESDIRECTORY}" -name '*.whl' -print -quit)")
                ls -l "${cv_whl}"
                cd /tmp
                python -m pip install --user --verbose "${cv_whl}"
                python -m pip list --disable-pip-version-check --no-index -vvv

                # check can run
                "${GOTO_PROGRAM}" --version

                # server test
                cd -
                SERVER_TEST=$("${GOTO_PATH_READLINK}" "./tools/ci/server-test.sh")
                chmod -v +x "${SERVER_TEST}"
                "${SERVER_TEST}"

                # uninstall
                python -m pip uninstall --yes --verbose "${GOTO_PACKAGE_NAME}"
          - task: PowerShell@2
            displayName: 'task: «PowerShell@2» vmImage "$(vmImageName)" Python $(python.version)'
            condition: in(variables['vmImageName'], 'vs2017-win2016')
            inputs:
              targetType: inline
              script: |
                # script settings
                $PSVersionTable
                $DebugPreference = "Continue"
                $ErrorActionPreference = "Stop"
                Set-PSDebug -Trace 1

                # update packages
                & python -m pip install --quiet --upgrade pip setuptools
                & python -m pip list --disable-pip-version-check --no-index -vvv

                # update PATH with potential pip install locations
                $usersite = & python -B -c 'import site; print(site.USER_SITE);'
                $userbase = & python -B -c 'import site; print(site.USER_BASE);'
                $env:PATH += [IO.Path]::PathSeparator + $usersite + [IO.Path]::PathSeparator + $userbase

                # install wheel package
                $cv_whl = Get-ChildItem -Path "$env:BUILD_BINARIESDIRECTORY" -Filter '*whl' -File | Select-Object -First 1
                Push-Location '..'
                & python -m pip install --user --verbose $cv_whl.FullName

                # run
                & "$env:GOTO_PROGRAM" --version
                # server test
                Pop-Location
                & bash "./tools/ci/server-test.sh"  # powershell to run bash! LOL!
                # uninstall
                python -m pip uninstall --yes --verbose "$env:GOTO_PACKAGE_NAME"
  - stage: stage_install_systemd
    displayName: 'stage: «install systemd, start service»'
    jobs:
      - job: job_install_systemd
        displayName: 'job: «install systemd, start service»'
        strategy:
          matrix:
            Ubuntu1604:
              vmImageName: 'ubuntu-16.04'
            Ubuntu1804:
              vmImageName: 'ubuntu-18.04'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: UsePythonVersion@0
            displayName: 'task: «UsePythonVersion@0» Python $(GOTO_PY_VERSION)'
            inputs:
              versionSpec: $(GOTO_PY_VERSION)
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: $(GOTO_WHEEL_ARTIFACT_DEFAULT)
              path: $(Build.BinariesDirectory)
          - task: Bash@3
            displayName: 'task: «Bash@3» vmImage "$(vmImageName)" Python $(GOTO_PY_VERSION)'
            inputs:
              targetType: inline
              script: |
                # script settings
                set -eux

                chmod -v +x "${GOTO_PATH_READLINK}"

                # update PATH with potential pip install locations
                source "${GOTO_PATH_ADD_PIP_SITE}"

                function sudo_python () {
                    # hack to force sudo shell to include the $PATH (which holds installed Python paths)
                    # XXX: does not handle spaces in arguments, a clever `eval` might improve this
                    sudo -HE -- bash -c "export PATH=${PATH}; python ${*}"
                }
                # update packages
                sudo_python -m pip list --disable-pip-version-check --no-index -vvv
                sudo_python -m pip install --quiet --upgrade pip setuptools
                sudo_python -m pip list --disable-pip-version-check --no-index -vvv

                # install wheel package
                cv_whl=$("${GOTO_PATH_READLINK}" "$(find "${BUILD_BINARIESDIRECTORY}" -name '*.whl' -print -quit)")
                ls -l "${cv_whl}"
                cd /tmp
                sudo_python -m pip install --verbose "${cv_whl}"
                sudo_python -m pip list --disable-pip-version-check --no-index -vvv
                cd -

                # install redirects file
                CSV_FILE=/usr/local/share/goto_http_redirect_server.csv
                echo '/a	http://aaa.com	bob	2000-01-01 00:00:00' | sudo -- tee "${CSV_FILE}"

                # link goto_http_redirect_server
                GOTO=/usr/local/bin/goto_http_redirect_server
                sudo -- ln -vs -- "$(which goto_http_redirect_server)" "${GOTO}"
                "${GOTO}" --version  # check it can run from new location

                # copy systemd wrapper
                WRAPPER=/usr/local/bin/goto_http_redirect_server.sh
                sudo -- cp -v -- ./service/goto_http_redirect_server.sh "$(dirname -- "${WRAPPER}")"
                sudo -- chmod -v +x -- "${WRAPPER}"

                # install systemd
                SERVICE=goto_http_redirect_server.service
                SERVICE_FILE=/etc/systemd/user/${SERVICE}
                sudo -- cp -v -- ./service/goto_http_redirect_server.service "$(dirname -- "${SERVICE_FILE}")"
                sudo -- chmod -v 0444 -- "${SERVICE_FILE}"

                # enable and start systemd service
                sudo -- systemctl enable "${SERVICE_FILE}"
                sudo -- systemctl start "${SERVICE}"
                sleep 2

                # check systemd service
                sudo -- systemctl status "${SERVICE}"

                # query service
                URL='http://127.0.0.1:80'
                curl --version
                curl -v --fail --output /dev/null "${URL}/a"

                # TODO: test service wrapper parameters `-u ... -n ...` etc.
...
